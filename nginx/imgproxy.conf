# Source code from: https://github.com/shinsenter/docker-imgproxy

# ======================================================================== #
# Block access from some bad IPs
# See: http://nginx.org/en/docs/http/ngx_http_access_module.html#deny
# Add your bad client IPs here. E.g.
deny 134.119.219.93;

# ======================================================================== #
# This upstream links to `imgproxy` container outside.
# Do not change this upstream
# unless you are going to change `imgproxy`'s container name.
upstream upstream_imgproxy  {
    server    imgproxy:8080;
    keepalive 16;
}

# ======================================================================== #
# Cache zone
# See: https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path
# Let's assume average file size is ~20kb
# max_size:  1mb of keys_zone can store 7,000 keys * 20kb = ~140mb
#            4mb of keys_zone can store ~28,000 keys = ~560mb
#            32mb of keys_zone can store ~224,000 keys = ~4.8gb
proxy_cache_path
    /var/cache/nginx/imgproxy levels=1:2 use_temp_path=off
    keys_zone=IMAGE_CACHE:32m max_size=5G min_free=32m inactive=7d;

# ======================================================================== #
# Temporary variables
##! **`$new_uri`**
map $uri $new_uri {
    default '$uri';
    ~^/proxy(?<parsed_path>.*)$             '$parsed_path';
}
##! **`$uri_omitted_origin`**
## Get the URI after omitting origin server.
## This setup assumes that an origin server starts with an `@` symbol.
map $new_uri $uri_omitted_origin
{
    default '$new_uri';
    ~^(/@[^/]+)?(?<parsed_path>/.+)$        '$parsed_path';
}
##! **`$uri_omitted_origin_preset`**
## Get the URI after omitting origin server and preset name.
## This setup assumes that preset name starts with an underscore (`_`) symbol.
map $uri_omitted_origin $uri_omitted_origin_preset
{
    default '$new_uri';
    ~*^(/_[a-z0-9_-]+)?(?<parsed_path>/.+)$ '$parsed_path';
}
# ======================================================================== #
# Variables for `imgproxy`
## **`$use_imgproxy`**
## This flag indicates that the request will be proceeded by `imgproxy`.
map $new_uri $use_imgproxy
{
    default 0;
    # Add any rules that you want to skip image processing.
    #> E.g. this line excludes files under "docs" folder.
    ~^/api/ 0;
    # Else, process all image files with these file extensions
    ~*\.(jpe?g|png|gif|tiff?|bmp)$  1;
}
##! **`$imgproxy_cache`**
## Default cache zone for `imgproxy`.
map $use_imgproxy $imgproxy_cache
{
    default off;
    1       IMAGE_CACHE;
}
## **`$origin_server`**
## Define origin base URL from the request.
## This setup assumes that an origin server starts with an `@` symbol (such as `@nasa`, `@pinterest`, etc.).
## You can also add your own origin servers using [regular expressions](https://www.nginx.com/blog/regular-expression-tester-nginx/).
map $new_uri $origin_server
{
    # default         'local://';
    default '';

    # Put your rewrite rules for origin servers from here.
    #> E.g.
    ~^/@bucket/   's3://your-s3';
    ~^/@myhost/     'http://myhost.com';
    ~^/@nasa/       'https://www.nasa.gov/sites/default/files/thumbnails/image';
    ~^/@pinterest/  'https://i.pinimg.com/originals';
    ~^/@bucket-alt/  'https://yourbucket.s3.region.amazonaws.com';
}
## **`$origin_uri`**
## Parse real origin URI of the file.
## This setup just omits origin server and preset name in the URI if they exist,
## but you can also rewrite requested URI using [regular expressions](https://www.nginx.com/blog/regular-expression-tester-nginx/).
map $uri_omitted_origin_preset $origin_uri
{
    default '$uri_omitted_origin_preset';

    # Put your rewrite rules for origin URI from here.
    #> E.g. this line rewrites cactus.jpg to the real path cacti.jpg.
    ~*^/cactus\.jpe?g$  '/cacti.jpg';
}
## **`$preset_name`**
## Parse preset name from requested URI.
## This setup assumes that preset name starts with an underscore (`_`) symbol (such as `_thumb` or `_w200`).
## You can define your own presets using [regular expressions](https://www.nginx.com/blog/regular-expression-tester-nginx/).
map $uri_omitted_origin $preset_name
{
    default '';

    # You can define dynamic presets,
    #> but beware that dynamic presets are able to cause a denial-of-service attack
    #> by allowing an attacker to request multiple different image resizes.
    #> E.g. a dynamic preset with a variable $width.
    # ~^/_w(?<parsed_width>[0-9_-]+)/  'max_w:${parsed_width}';

    # This is a better version for above dynamic preset.
    #> It allows only certain image sizes,
    #> and fallbacks other undefined image sizes to max_w:200
    ~^/_w(?<parsed_width>(200|640|800|1200|1600))/  'max_w:${parsed_width}';
    ~^/_w(?<parsed_width>([0-9_-]+))/               'max_w:200';

    # Get static preset name from the URI
    ~^/_(?<parsed_name>[a-z0-9_-]+)/ '$parsed_name';
}
## **`$imgproxy_preset`**
## Define `imgproxy` options for each preset name.
map $preset_name $imgproxy_preset
{
    default 'size:1600:0:0:0';

    # Dynamic preset
    ~^max_w:(?<width>[0-9]+)$ 'size:${width}:0:0:0';

    # Static presets
    blurry  'size:320:320:1:0/blur:10/quality:50';
    small   'size:320:320:0:0/sharpen:0.3';
    medium  'size:640:640:0:0';
    thumb   'size:160:160:1:1/bg:ffffff/resizing_type:fill/sharpen:0.3';
    square  'size:500:500:0:1/bg:ffffff/resizing_type:fill';
}
## **`$imgproxy_extension`**
## Detect WebP or AVIF supports from the request header `Accept`.
map $http_accept $imgproxy_extension
{
    default '';
    # ~*webp  '@webp';
    # ~*avif  '@avif';
}
## **`$imgproxy_options`**
## Generate final URL for `imgproxy` following [their documentation](https://docs.imgproxy.net/generating_the_url).
## When URL query `?skip=1` is set, use another rule to skip `imgproxy` processing.
map $arg_skip $imgproxy_options
{
    default '/unsafe/${imgproxy_preset}/plain/${origin_server}${origin_uri}${imgproxy_extension}';
    ~.+     '/unsafe/plain/${origin_server}${origin_uri}';
}
##! **`$imgproxy_rewrite`**
## Generate final URL for `imgproxy` following [their documentation](https://docs.imgproxy.net/generating_the_url).
map $use_imgproxy $imgproxy_rewrite
{
    default '';
    1       '$imgproxy_options';
}
##! **`$debug_imgproxy_rewrite`**
## For debugging the value of `$imgproxy_rewrite`.
map $arg_debug $debug_imgproxy_rewrite
{
    default '';
    ~.+     '$imgproxy_rewrite';
}
## **`$fallback_uri`**
## Define fallback file to serve when the requested file is unavailable.
## E.g. `/noimage.jpg` or `/noimage_thumb.jpg`, which is stored in the folder `www/`.
map $preset_name $fallback_uri
{
    default '/No_Image_Available.jpg';
    # thumb   '/No_Image_Available_Thumb.jpg';
    # small   '/No_Image_Available_Small.jpg';
    # medium  '/No_Image_Available_Medium.jpg';
    # square  '/No_Image_Available_Square.jpg';
}
